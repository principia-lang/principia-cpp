title “The answer to Scott”

author “Remco Bloemen”

date “2016-07-01”

description “
	
	This file implements Scott numerals and decimal printing using
	only a “print” function that takes a single string constant:
	
		λ print value ret
	
	Other than this, the file is entirely self-contained.
	
	The function “main” will compute 7 × 6 and print the result in
	decimal along with a whimsical quote.
	
”

section “Print helpers”

λ print-newline ret
print “
” ret

λ print-line arg ret
	print arg (λ ·)
	print-newline ret

section “Scott numerals”

λ Z   (· (λ · (·) _    ))
λ S n (· (λ ·  _ (· n) ))

λ n0 z s (z)
λ n1 z s (s n0)
λ n2 z s (s n1)
λ n3 z s (s n2)
λ n4 z s (s n3)
λ n5 z s (s n4)
λ n6 z s (s n5)
λ n7 z s (s n6)
λ n8 z s (s n7)
λ n9 z s (s n8)
λ n10 z s (s n9)

λ if_zero n then else
	n then (λ · n')
	else

λ if_equal m n then else
	m m_zero m_nonzero
	λ m_zero
		if_zero n then else
	λ m_nonzero m'
		n else recurse
		λ recurse n'
			if_equal m' n' then else

λ add m n ret
	m m_zero m_nonzero
	λ m_zero
		ret n
	λ m_nonzero m'
		S n recurse
		λ recurse n'
			add m' n' ret

λ sub m n ret fail
	n n_zero n_nonzero
	λ n_zero
		ret m
	λ n_nonzero n'
		m fail recurse
		λ recurse m'
			sub m' n' ret fail

λ mul m n ret
	m m_zero m_nonzero
	λ m_zero
		Z ret
	λ m_nonzero m'
		mul m' n (λ · r)
		add r n ret

λ div m n ret
	sub m n recurse done
	λ done
		ret n0 m
	λ recurse m'
		div m' n (λ · q r)
		S q (λ · q')
		ret q' r

λ exp m n ret
	n (λ · (ret n1)) recurse
	λ recurse n'
		exp m n' (λ · r')
		mul m r' (λ · r)
		ret r

λ fact n ret
	n done recurse
	λ done
		ret n1
	λ recurse n'
		fact n' (λ · r')
		mul n r' (λ · r)
		ret r

λ fib n ret
	n zero recurse
	λ zero
		ret n1
	λ recurse n'
		n' one recurse'
		λ one
			ret n1
		λ recurse' n''
			fib n' (λ · r')
			fib n'' (λ · r'')
			add r' r'' (λ · r)
			ret r

λ pra m n ret
	m case0 (λ · m' (n case1 case2))
	λ case0
		add n1 n ret
	λ case1
		pra m' 1 ret
	λ case2 n'
		pra m n' (λ · r)
		pra m' r ret

section “Decimal output”

λ print-decimal n ret fail
	if_equal n n0 (λ · (print “0” ret)) (λ ·)
	if_equal n n1 (λ · (print “1” ret)) (λ ·)
	if_equal n n2 (λ · (print “2” ret)) (λ ·)
	if_equal n n3 (λ · (print “3” ret)) (λ ·)
	if_equal n n4 (λ · (print “4” ret)) (λ ·)
	if_equal n n5 (λ · (print “5” ret)) (λ ·)
	if_equal n n6 (λ · (print “6” ret)) (λ ·)
	if_equal n n7 (λ · (print “7” ret)) (λ ·)
	if_equal n n8 (λ · (print “8” ret)) (λ ·)
	if_equal n n9 (λ · (print “9” ret)) (λ ·)
	fail

λ print-number n ret fail
	div n n10 (λ · q r)
	if_zero q done recurse
	λ recurse
		print-number q done fail
	λ done
		print-decimal r ret fail

section “Main”

λ main exit
	print “4⁴ = ” (λ ·)
	exp n4 n4 (λ · f)
	print-number f (λ ·) fail
	print-newline (λ ·)
	print “5! = ” (λ ·)
	fact n5 (λ · f)
	print-number f (λ ·) fail
	print-newline (λ ·)
	print “The answer to the universe, life and everything is: ” (λ ·)
	mul n7 n6 (λ · r)
	print-number r (λ ·) fail
	print-newline exit
	λ fail
		print-newline (λ ·)
		print-line “Failed!” exit
